#ifndef HTML_TAGS_H_
#define HTML_TAGS_H_

#define SCOPE(atStart, atEnd) for (int _scope_break = ((atStart), 1); _scope_break; _scope_break = ((atEnd), 0))

#define DOCTYPE sprintf(hr->body_buffer, "<!DOCTYPE html>")
#define HTML(lang) SCOPE(sprintf(hr->body_buffer, "<html lang='%s'>", lang), sprintf(hr->body_buffer,"</html>"))
#define HEAD() SCOPE(sprintf(hr->body_buffer,"<head>"), sprintf(hr->body_buffer,"</head>"))
#define TITLE(text) sprintf(hr->body_buffer, "<title>%s</title>", text)
#define META(attributes) sprintf(hr->body_buffer, "<meta %s>", attributes)
#define LINK(attributes) sprintf(hr->body_buffer, "<link %s>", attributes)
#define SCRIPT(src) sprintf(hr->body_buffer, "<script src='%s'></script>", src)
#define BODY(attributes) SCOPE(sprintf(hr->body_buffer, "<body %s>", attributes), sprintf(hr->body_buffer,"</body>"))
#define DIV(attributes) SCOPE(sprintf(hr->body_buffer, "<div %s>", attributes), sprintf(hr->body_buffer,"</div>"))
#define UL(attributes) SCOPE(sprintf(hr->body_buffer, "<ul %s>", attributes), sprintf(hr->body_buffer,"</ul>"))
#define OL(attributes) SCOPE(sprintf(hr->body_buffer, "<ol %s>", attributes), sprintf(hr->body_buffer,"</ol>"))
#define LI(attributes) SCOPE(sprintf(hr->body_buffer, "<li %s>", attributes), sprintf(hr->body_buffer,"</li>"))
#define BR sprintf("<br>")
#define _(...) sprintf(hr->body_buffer, __VA_ARGS__)
#define H1(attributes) SCOPE(sprintf(hr->body_buffer, "<h1 %s>", attributes), sprintf(hr->body_buffer,"</h1>"))
#define H2(attributes) SCOPE(sprintf(hr->body_buffer, "<h2 %s>", attributes), sprintf(hr->body_buffer,"</h2>"))
#define H3(attributes) SCOPE(sprintf(hr->body_buffer, "<h3 %s>", attributes), sprintf(hr->body_buffer,"</h3>"))
#define H4(attributes) SCOPE(sprintf(hr->body_buffer, "<h4 %s>", attributes), sprintf(hr->body_buffer,"</h4>"))
#define H5(attributes) SCOPE(sprintf(hr->body_buffer, "<h5 %s>", attributes), sprintf(hr->body_buffer,"</h5>"))
#define H6(attributes) SCOPE(sprintf(hr->body_buffer, "<h6 %s>", attributes), sprintf(hr->body_buffer,"</h6>"))
#define P(content) sprintf(hr->body_buffer, "<p>%s</p>", content)
#define A(href, content) sprintf(hr->body_buffer, "<a href='%s'>%s</a>", href, content)
#define IMG(attributes) sprintf(hr->body_buffer, "<img %s>", attributes)
#define HR sprintf("<hr/>")
#define TABLE(attributes) SCOPE(sprintf(hr->body_buffer, "<table %s>", attributes), sprintf(hr->body_buffer,"</table>"))
#define TR(attributes) SCOPE(sprintf(hr->body_buffer, "<tr %s>", attributes), sprintf(hr->body_buffer,"</tr>"))
#define TD(attributes) SCOPE(sprintf(hr->body_buffer, "<td %s>", attributes), sprintf(hr->body_buffer,"</td>"))
#define TH(attributes) SCOPE(sprintf(hr->body_buffer, "<th %s>", attributes), sprintf(hr->body_buffer,"</th>"))
#define FORM(attributes) SCOPE(sprintf(hr->body_buffer, "<form %s>", attributes), sprintf(hr->body_buffer,"</form>"))
#define INPUT(attributes) sprintf(hr->body_buffer, "<input %s>", attributes)
#define OPTION(attributes, content) sprintf(hr->body_buffer, "<option %s>%s</option>", attributes, content)

#endif